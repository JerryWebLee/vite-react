name: 自动部署

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  # 测试和构建
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 代码检查
        run: |
          pnpm lint
          pnpm lint:style

      - name: 构建应用
        run: pnpm run build

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: 构建 Docker 镜像
        run: docker build -t vite-react-app:latest .

      - name: 运行 Trivy 安全扫描
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "vite-react-app:latest"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 上传 Trivy 扫描结果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # 部署到测试环境
  deploy-test:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: test

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: 设置 SSH 密钥
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 部署到测试服务器
        run: |
          chmod +x deploy_company_test_sw.sh
          ./deploy_company_test_sw.sh

  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, '[deploy-prod]')
    environment: production

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: 设置 SSH 密钥
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}

      - name: 部署到生产服务器
        run: |
          chmod +x deploy.sh
          ./deploy.sh
